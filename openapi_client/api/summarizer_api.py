# coding: utf-8

"""
    Kagi API

    The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

    The version of the OpenAPI document: 0.0.0
    Contact: support@kagi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.summary import Summary
from openapi_client.models.upload_text import UploadText

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SummarizerApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def summarize_text(
        self,
        upload_text: Annotated[UploadText, Field(description="Text to summarize")],
        engine: Annotated[Optional[StrictStr], Field(description="Different summarization engines are provided that will give you choices over the \"flavor\" of the summarization text.")] = None,
        summary_type: Annotated[Optional[StrictStr], Field(description="Different summary types are provided that control the structure of the summary output.")] = None,
        target_language: Annotated[Optional[StrictStr], Field(description="The summarizer can translate the output into a desired language, using the table of supported language codes below.  If no language is specified, the document's original language is allowed to influence the summarizer's output. Specifying a language will add an explicit translation step, to translate the summary to the desired language.  For example, if a document is mostly written in Spanish, the summary output may itself be in Spanish or contain Spanish passages. Specifying \"EN\" will ensure all passages are translated as English. ")] = None,
        cache: Annotated[Optional[StrictBool], Field(description="Whether to allow cached requests & responses.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Summary:
        """Upload text to summarize.


        :param upload_text: Text to summarize (required)
        :type upload_text: UploadText
        :param engine: Different summarization engines are provided that will give you choices over the \"flavor\" of the summarization text.
        :type engine: str
        :param summary_type: Different summary types are provided that control the structure of the summary output.
        :type summary_type: str
        :param target_language: The summarizer can translate the output into a desired language, using the table of supported language codes below.  If no language is specified, the document's original language is allowed to influence the summarizer's output. Specifying a language will add an explicit translation step, to translate the summary to the desired language.  For example, if a document is mostly written in Spanish, the summary output may itself be in Spanish or contain Spanish passages. Specifying \"EN\" will ensure all passages are translated as English. 
        :type target_language: str
        :param cache: Whether to allow cached requests & responses.
        :type cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._summarize_text_serialize(
            upload_text=upload_text,
            engine=engine,
            summary_type=summary_type,
            target_language=target_language,
            cache=cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Summary",
            '401': "ExampleError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def summarize_text_with_http_info(
        self,
        upload_text: Annotated[UploadText, Field(description="Text to summarize")],
        engine: Annotated[Optional[StrictStr], Field(description="Different summarization engines are provided that will give you choices over the \"flavor\" of the summarization text.")] = None,
        summary_type: Annotated[Optional[StrictStr], Field(description="Different summary types are provided that control the structure of the summary output.")] = None,
        target_language: Annotated[Optional[StrictStr], Field(description="The summarizer can translate the output into a desired language, using the table of supported language codes below.  If no language is specified, the document's original language is allowed to influence the summarizer's output. Specifying a language will add an explicit translation step, to translate the summary to the desired language.  For example, if a document is mostly written in Spanish, the summary output may itself be in Spanish or contain Spanish passages. Specifying \"EN\" will ensure all passages are translated as English. ")] = None,
        cache: Annotated[Optional[StrictBool], Field(description="Whether to allow cached requests & responses.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Summary]:
        """Upload text to summarize.


        :param upload_text: Text to summarize (required)
        :type upload_text: UploadText
        :param engine: Different summarization engines are provided that will give you choices over the \"flavor\" of the summarization text.
        :type engine: str
        :param summary_type: Different summary types are provided that control the structure of the summary output.
        :type summary_type: str
        :param target_language: The summarizer can translate the output into a desired language, using the table of supported language codes below.  If no language is specified, the document's original language is allowed to influence the summarizer's output. Specifying a language will add an explicit translation step, to translate the summary to the desired language.  For example, if a document is mostly written in Spanish, the summary output may itself be in Spanish or contain Spanish passages. Specifying \"EN\" will ensure all passages are translated as English. 
        :type target_language: str
        :param cache: Whether to allow cached requests & responses.
        :type cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._summarize_text_serialize(
            upload_text=upload_text,
            engine=engine,
            summary_type=summary_type,
            target_language=target_language,
            cache=cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Summary",
            '401': "ExampleError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def summarize_text_without_preload_content(
        self,
        upload_text: Annotated[UploadText, Field(description="Text to summarize")],
        engine: Annotated[Optional[StrictStr], Field(description="Different summarization engines are provided that will give you choices over the \"flavor\" of the summarization text.")] = None,
        summary_type: Annotated[Optional[StrictStr], Field(description="Different summary types are provided that control the structure of the summary output.")] = None,
        target_language: Annotated[Optional[StrictStr], Field(description="The summarizer can translate the output into a desired language, using the table of supported language codes below.  If no language is specified, the document's original language is allowed to influence the summarizer's output. Specifying a language will add an explicit translation step, to translate the summary to the desired language.  For example, if a document is mostly written in Spanish, the summary output may itself be in Spanish or contain Spanish passages. Specifying \"EN\" will ensure all passages are translated as English. ")] = None,
        cache: Annotated[Optional[StrictBool], Field(description="Whether to allow cached requests & responses.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload text to summarize.


        :param upload_text: Text to summarize (required)
        :type upload_text: UploadText
        :param engine: Different summarization engines are provided that will give you choices over the \"flavor\" of the summarization text.
        :type engine: str
        :param summary_type: Different summary types are provided that control the structure of the summary output.
        :type summary_type: str
        :param target_language: The summarizer can translate the output into a desired language, using the table of supported language codes below.  If no language is specified, the document's original language is allowed to influence the summarizer's output. Specifying a language will add an explicit translation step, to translate the summary to the desired language.  For example, if a document is mostly written in Spanish, the summary output may itself be in Spanish or contain Spanish passages. Specifying \"EN\" will ensure all passages are translated as English. 
        :type target_language: str
        :param cache: Whether to allow cached requests & responses.
        :type cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._summarize_text_serialize(
            upload_text=upload_text,
            engine=engine,
            summary_type=summary_type,
            target_language=target_language,
            cache=cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Summary",
            '401': "ExampleError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _summarize_text_serialize(
        self,
        upload_text,
        engine,
        summary_type,
        target_language,
        cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if engine is not None:
            
            _query_params.append(('engine', engine))
            
        if summary_type is not None:
            
            _query_params.append(('summary_type', summary_type))
            
        if target_language is not None:
            
            _query_params.append(('target_language', target_language))
            
        if cache is not None:
            
            _query_params.append(('cache', cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if upload_text is not None:
            _body_params = upload_text


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'kagi'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/summarize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def summarize_url(
        self,
        url: Annotated[StrictStr, Field(description="A URL to a document to summarize.")],
        engine: Annotated[Optional[StrictStr], Field(description="Different summarization engines are provided that will give you choices over the \"flavor\" of the summarization text.")] = None,
        summary_type: Annotated[Optional[StrictStr], Field(description="Different summary types are provided that control the structure of the summary output.")] = None,
        target_language: Annotated[Optional[StrictStr], Field(description="The summarizer can translate the output into a desired language, using the table of supported language codes below.  If no language is specified, the document's original language is allowed to influence the summarizer's output. Specifying a language will add an explicit translation step, to translate the summary to the desired language.  For example, if a document is mostly written in Spanish, the summary output may itself be in Spanish or contain Spanish passages. Specifying \"EN\" will ensure all passages are translated as English. ")] = None,
        cache: Annotated[Optional[StrictBool], Field(description="Whether to allow cached requests & responses.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Summary:
        """Get a summary for a URL


        :param url: A URL to a document to summarize. (required)
        :type url: str
        :param engine: Different summarization engines are provided that will give you choices over the \"flavor\" of the summarization text.
        :type engine: str
        :param summary_type: Different summary types are provided that control the structure of the summary output.
        :type summary_type: str
        :param target_language: The summarizer can translate the output into a desired language, using the table of supported language codes below.  If no language is specified, the document's original language is allowed to influence the summarizer's output. Specifying a language will add an explicit translation step, to translate the summary to the desired language.  For example, if a document is mostly written in Spanish, the summary output may itself be in Spanish or contain Spanish passages. Specifying \"EN\" will ensure all passages are translated as English. 
        :type target_language: str
        :param cache: Whether to allow cached requests & responses.
        :type cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._summarize_url_serialize(
            url=url,
            engine=engine,
            summary_type=summary_type,
            target_language=target_language,
            cache=cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Summary",
            '401': "ExampleError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def summarize_url_with_http_info(
        self,
        url: Annotated[StrictStr, Field(description="A URL to a document to summarize.")],
        engine: Annotated[Optional[StrictStr], Field(description="Different summarization engines are provided that will give you choices over the \"flavor\" of the summarization text.")] = None,
        summary_type: Annotated[Optional[StrictStr], Field(description="Different summary types are provided that control the structure of the summary output.")] = None,
        target_language: Annotated[Optional[StrictStr], Field(description="The summarizer can translate the output into a desired language, using the table of supported language codes below.  If no language is specified, the document's original language is allowed to influence the summarizer's output. Specifying a language will add an explicit translation step, to translate the summary to the desired language.  For example, if a document is mostly written in Spanish, the summary output may itself be in Spanish or contain Spanish passages. Specifying \"EN\" will ensure all passages are translated as English. ")] = None,
        cache: Annotated[Optional[StrictBool], Field(description="Whether to allow cached requests & responses.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Summary]:
        """Get a summary for a URL


        :param url: A URL to a document to summarize. (required)
        :type url: str
        :param engine: Different summarization engines are provided that will give you choices over the \"flavor\" of the summarization text.
        :type engine: str
        :param summary_type: Different summary types are provided that control the structure of the summary output.
        :type summary_type: str
        :param target_language: The summarizer can translate the output into a desired language, using the table of supported language codes below.  If no language is specified, the document's original language is allowed to influence the summarizer's output. Specifying a language will add an explicit translation step, to translate the summary to the desired language.  For example, if a document is mostly written in Spanish, the summary output may itself be in Spanish or contain Spanish passages. Specifying \"EN\" will ensure all passages are translated as English. 
        :type target_language: str
        :param cache: Whether to allow cached requests & responses.
        :type cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._summarize_url_serialize(
            url=url,
            engine=engine,
            summary_type=summary_type,
            target_language=target_language,
            cache=cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Summary",
            '401': "ExampleError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def summarize_url_without_preload_content(
        self,
        url: Annotated[StrictStr, Field(description="A URL to a document to summarize.")],
        engine: Annotated[Optional[StrictStr], Field(description="Different summarization engines are provided that will give you choices over the \"flavor\" of the summarization text.")] = None,
        summary_type: Annotated[Optional[StrictStr], Field(description="Different summary types are provided that control the structure of the summary output.")] = None,
        target_language: Annotated[Optional[StrictStr], Field(description="The summarizer can translate the output into a desired language, using the table of supported language codes below.  If no language is specified, the document's original language is allowed to influence the summarizer's output. Specifying a language will add an explicit translation step, to translate the summary to the desired language.  For example, if a document is mostly written in Spanish, the summary output may itself be in Spanish or contain Spanish passages. Specifying \"EN\" will ensure all passages are translated as English. ")] = None,
        cache: Annotated[Optional[StrictBool], Field(description="Whether to allow cached requests & responses.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a summary for a URL


        :param url: A URL to a document to summarize. (required)
        :type url: str
        :param engine: Different summarization engines are provided that will give you choices over the \"flavor\" of the summarization text.
        :type engine: str
        :param summary_type: Different summary types are provided that control the structure of the summary output.
        :type summary_type: str
        :param target_language: The summarizer can translate the output into a desired language, using the table of supported language codes below.  If no language is specified, the document's original language is allowed to influence the summarizer's output. Specifying a language will add an explicit translation step, to translate the summary to the desired language.  For example, if a document is mostly written in Spanish, the summary output may itself be in Spanish or contain Spanish passages. Specifying \"EN\" will ensure all passages are translated as English. 
        :type target_language: str
        :param cache: Whether to allow cached requests & responses.
        :type cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._summarize_url_serialize(
            url=url,
            engine=engine,
            summary_type=summary_type,
            target_language=target_language,
            cache=cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Summary",
            '401': "ExampleError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _summarize_url_serialize(
        self,
        url,
        engine,
        summary_type,
        target_language,
        cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if engine is not None:
            
            _query_params.append(('engine', engine))
            
        if summary_type is not None:
            
            _query_params.append(('summary_type', summary_type))
            
        if target_language is not None:
            
            _query_params.append(('target_language', target_language))
            
        if cache is not None:
            
            _query_params.append(('cache', cache))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'kagi'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/summarize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


