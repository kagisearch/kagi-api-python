# coding: utf-8

"""
    Kagi API

    The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 

    The version of the OpenAPI document: 0.1.0
    Contact: support@kagi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.translate_request_text import TranslateRequestText
from typing import Optional, Set
from typing_extensions import Self

class TranslateRequest(BaseModel):
    """
    TranslateRequest
    """ # noqa: E501
    text: TranslateRequestText
    source_lang: Optional[StrictStr] = Field(default='auto', description="Source language code (ISO-639) or \"auto\" for automatic detection")
    target_lang: Optional[StrictStr] = Field(default='en', description="Target language code (ISO-639)")
    var_from: Optional[StrictStr] = Field(default=None, description="Legacy parameter for source language (use source_lang instead)", alias="from")
    to: Optional[StrictStr] = Field(default=None, description="Legacy parameter for target language (use target_lang instead)")
    context: Optional[StrictStr] = Field(default=None, description="Additional context to improve translation accuracy")
    preserve_formatting: Optional[StrictBool] = Field(default=False, description="Whether to preserve original text formatting")
    formality: Optional[StrictStr] = Field(default='default', description="Level of formality in translation. All formality levels are supported for all language pairs. 'prefer_more' is same as 'more', and 'prefer_less' is same as 'less' (included for backwards compatibility).")
    speaker_gender: Optional[StrictStr] = Field(default='unknown', description="Gender of the speaker for languages with gender-specific expressions")
    addressee_gender: Optional[StrictStr] = Field(default='unknown', description="Gender of the addressee for languages with gender-specific expressions")
    translation_style: Optional[StrictStr] = Field(default='natural', description="Style of translation (natural for fluency, literal for exactness)")
    predicted_language: Optional[StrictStr] = Field(default=None, description="Pre-detected source language (if available)")
    prediction: Optional[StrictStr] = Field(default=None, description="Pre-generated translation (if available)")
    stream: Optional[StrictBool] = Field(default=False, description="Whether to stream the response as Server-Sent Events")
    dictionary_language: Optional[StrictStr] = Field(default=None, description="Language code for dictionary definitions (if not provided, the source language will be used)")
    __properties: ClassVar[List[str]] = ["text", "source_lang", "target_lang", "from", "to", "context", "preserve_formatting", "formality", "speaker_gender", "addressee_gender", "translation_style", "predicted_language", "prediction", "stream", "dictionary_language"]

    @field_validator('formality')
    def formality_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default', 'more', 'less', 'prefer_more', 'prefer_less']):
            raise ValueError("must be one of enum values ('default', 'more', 'less', 'prefer_more', 'prefer_less')")
        return value

    @field_validator('speaker_gender')
    def speaker_gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'feminine', 'masculine', 'neutral']):
            raise ValueError("must be one of enum values ('unknown', 'feminine', 'masculine', 'neutral')")
        return value

    @field_validator('addressee_gender')
    def addressee_gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'feminine', 'masculine', 'neutral']):
            raise ValueError("must be one of enum values ('unknown', 'feminine', 'masculine', 'neutral')")
        return value

    @field_validator('translation_style')
    def translation_style_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['natural', 'literal']):
            raise ValueError("must be one of enum values ('natural', 'literal')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranslateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranslateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": TranslateRequestText.from_dict(obj["text"]) if obj.get("text") is not None else None,
            "source_lang": obj.get("source_lang") if obj.get("source_lang") is not None else 'auto',
            "target_lang": obj.get("target_lang") if obj.get("target_lang") is not None else 'en',
            "from": obj.get("from"),
            "to": obj.get("to"),
            "context": obj.get("context"),
            "preserve_formatting": obj.get("preserve_formatting") if obj.get("preserve_formatting") is not None else False,
            "formality": obj.get("formality") if obj.get("formality") is not None else 'default',
            "speaker_gender": obj.get("speaker_gender") if obj.get("speaker_gender") is not None else 'unknown',
            "addressee_gender": obj.get("addressee_gender") if obj.get("addressee_gender") is not None else 'unknown',
            "translation_style": obj.get("translation_style") if obj.get("translation_style") is not None else 'natural',
            "predicted_language": obj.get("predicted_language"),
            "prediction": obj.get("prediction"),
            "stream": obj.get("stream") if obj.get("stream") is not None else False,
            "dictionary_language": obj.get("dictionary_language")
        })
        return _obj


