# coding: utf-8

"""
    Kagi API

    The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 

    The version of the OpenAPI document: 0.1.0
    Contact: support@kagi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.result_adjacent_question import ResultAdjacentQuestion
from openapi_client.models.result_infobox import ResultInfobox
from openapi_client.models.result_search import ResultSearch
from openapi_client.models.result_video import ResultVideo
from openapi_client.models.result_web_archive import ResultWebArchive
from typing import Optional, Set
from typing_extensions import Self

class SuperSearch200ResponseData(BaseModel):
    """
    SuperSearch200ResponseData
    """ # noqa: E501
    search: Optional[List[ResultSearch]] = None
    video: Optional[List[ResultVideo]] = None
    adjacent_question: Optional[List[ResultAdjacentQuestion]] = None
    infobox: Optional[List[ResultInfobox]] = None
    web_archive: Optional[List[ResultWebArchive]] = None
    __properties: ClassVar[List[str]] = ["search", "video", "adjacent_question", "infobox", "web_archive"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SuperSearch200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in search (list)
        _items = []
        if self.search:
            for _item_search in self.search:
                if _item_search:
                    _items.append(_item_search.to_dict())
            _dict['search'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in video (list)
        _items = []
        if self.video:
            for _item_video in self.video:
                if _item_video:
                    _items.append(_item_video.to_dict())
            _dict['video'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in adjacent_question (list)
        _items = []
        if self.adjacent_question:
            for _item_adjacent_question in self.adjacent_question:
                if _item_adjacent_question:
                    _items.append(_item_adjacent_question.to_dict())
            _dict['adjacent_question'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in infobox (list)
        _items = []
        if self.infobox:
            for _item_infobox in self.infobox:
                if _item_infobox:
                    _items.append(_item_infobox.to_dict())
            _dict['infobox'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in web_archive (list)
        _items = []
        if self.web_archive:
            for _item_web_archive in self.web_archive:
                if _item_web_archive:
                    _items.append(_item_web_archive.to_dict())
            _dict['web_archive'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SuperSearch200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "search": [ResultSearch.from_dict(_item) for _item in obj["search"]] if obj.get("search") is not None else None,
            "video": [ResultVideo.from_dict(_item) for _item in obj["video"]] if obj.get("video") is not None else None,
            "adjacent_question": [ResultAdjacentQuestion.from_dict(_item) for _item in obj["adjacent_question"]] if obj.get("adjacent_question") is not None else None,
            "infobox": [ResultInfobox.from_dict(_item) for _item in obj["infobox"]] if obj.get("infobox") is not None else None,
            "web_archive": [ResultWebArchive.from_dict(_item) for _item in obj["web_archive"]] if obj.get("web_archive") is not None else None
        })
        return _obj


