# coding: utf-8

"""
    Kagi API

    The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

    The version of the OpenAPI document: 0.0.0
    Contact: support@kagi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.translate_proof_read_get200_response_changes_inner import TranslateProofReadGet200ResponseChangesInner
from openapi_client.models.translate_proof_read_get200_response_detected_language import TranslateProofReadGet200ResponseDetectedLanguage
from openapi_client.models.translate_proof_read_get200_response_repetition_detection import TranslateProofReadGet200ResponseRepetitionDetection
from openapi_client.models.translate_proof_read_get200_response_tone_analysis import TranslateProofReadGet200ResponseToneAnalysis
from openapi_client.models.translate_proof_read_get200_response_voice_consistency import TranslateProofReadGet200ResponseVoiceConsistency
from typing import Optional, Set
from typing_extensions import Self

class TranslateProofReadGet200Response(BaseModel):
    """
    TranslateProofReadGet200Response
    """ # noqa: E501
    corrected_text: Optional[StrictStr] = Field(default=None, description="The proofread and corrected text")
    detected_language: Optional[TranslateProofReadGet200ResponseDetectedLanguage] = None
    changes: Optional[List[TranslateProofReadGet200ResponseChangesInner]] = None
    corrections_summary: Optional[StrictStr] = Field(default=None, description="Overall explanation of corrections or acknowledgment of error-free text")
    tone_analysis: Optional[TranslateProofReadGet200ResponseToneAnalysis] = None
    voice_consistency: Optional[TranslateProofReadGet200ResponseVoiceConsistency] = None
    repetition_detection: Optional[TranslateProofReadGet200ResponseRepetitionDetection] = None
    explanation_language: Optional[StrictStr] = Field(default=None, description="ISO code of the language used for explanations and analysis")
    __properties: ClassVar[List[str]] = ["corrected_text", "detected_language", "changes", "corrections_summary", "tone_analysis", "voice_consistency", "repetition_detection", "explanation_language"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranslateProofReadGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of detected_language
        if self.detected_language:
            _dict['detected_language'] = self.detected_language.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in changes (list)
        _items = []
        if self.changes:
            for _item_changes in self.changes:
                if _item_changes:
                    _items.append(_item_changes.to_dict())
            _dict['changes'] = _items
        # override the default output from pydantic by calling `to_dict()` of tone_analysis
        if self.tone_analysis:
            _dict['tone_analysis'] = self.tone_analysis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voice_consistency
        if self.voice_consistency:
            _dict['voice_consistency'] = self.voice_consistency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repetition_detection
        if self.repetition_detection:
            _dict['repetition_detection'] = self.repetition_detection.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranslateProofReadGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "corrected_text": obj.get("corrected_text"),
            "detected_language": TranslateProofReadGet200ResponseDetectedLanguage.from_dict(obj["detected_language"]) if obj.get("detected_language") is not None else None,
            "changes": [TranslateProofReadGet200ResponseChangesInner.from_dict(_item) for _item in obj["changes"]] if obj.get("changes") is not None else None,
            "corrections_summary": obj.get("corrections_summary"),
            "tone_analysis": TranslateProofReadGet200ResponseToneAnalysis.from_dict(obj["tone_analysis"]) if obj.get("tone_analysis") is not None else None,
            "voice_consistency": TranslateProofReadGet200ResponseVoiceConsistency.from_dict(obj["voice_consistency"]) if obj.get("voice_consistency") is not None else None,
            "repetition_detection": TranslateProofReadGet200ResponseRepetitionDetection.from_dict(obj["repetition_detection"]) if obj.get("repetition_detection") is not None else None,
            "explanation_language": obj.get("explanation_language")
        })
        return _obj


