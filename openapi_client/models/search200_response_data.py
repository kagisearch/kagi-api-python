# coding: utf-8

"""
    Kagi API

    The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python) - [Rust](https://github.com/kagisearch/kagi-api-rust)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 

    The version of the OpenAPI document: 0.1.0
    Contact: support@kagi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.search_result import SearchResult
from typing import Optional, Set
from typing_extensions import Self

class Search200ResponseData(BaseModel):
    """
    Holds all the search results for the query specified. As results have different types and sources, they are spearated into different fields within this object. For example image results are stored under `data.image` while news results are stored under `data.news`. All results will have the same main structure, but additional data might be stored under the `data.{name}[].props` path. Please look at each different type of result for more information about this.
    """ # noqa: E501
    search: Optional[List[SearchResult]] = Field(default=None, description="Contains all search results for html pages or wedbsites.")
    image: Optional[List[SearchResult]] = Field(default=None, description="Contains all search results for images.")
    video: Optional[List[SearchResult]] = Field(default=None, description="Contains all search results for videos.")
    podcast: Optional[List[SearchResult]] = Field(default=None, description="Contains all search results for podcasts.")
    podcast_creator: Optional[List[SearchResult]] = Field(default=None, description="Contains all search results for creators of podcasta.")
    news: Optional[List[SearchResult]] = Field(default=None, description="Contains all search results for news articles.")
    adjacent_question: Optional[List[SearchResult]] = Field(default=None, description="Contains results that are obtained by searching for slightly different queries. These questions are stored under the `props.question` path.")
    direct_answer: Optional[List[SearchResult]] = Field(default=None, description="If the search query was a math equation, or unit conversions, things that can be answered quickly, the result will be in here.")
    interesting_news: Optional[List[SearchResult]] = Field(default=None, description="Contains news results from publishers collected and stored in Kagis' news index.")
    interesting_finds: Optional[List[SearchResult]] = Field(default=None, description="Contains small web results from publishers collected and stored in Kagis' small web index.")
    infobox: Optional[List[SearchResult]] = Field(default=None, description="Contains detailed summary and tabulated information about a person, place, or thing.")
    code: Optional[List[SearchResult]] = Field(default=None, description="Contains all search results that link to code resources or repositories.")
    package_tracking: Optional[List[SearchResult]] = Field(default=None, description="If the search query was a package tracking number, the correct package tracking website should be present in this collection.")
    public_records: Optional[List[SearchResult]] = Field(default=None, description="Contains all search results for public records, such as government documents, or public court records.")
    weather: Optional[List[SearchResult]] = Field(default=None, description="Contains all search results for the current weather.")
    related_search: Optional[List[SearchResult]] = Field(default=None, description="Contains a list of searches that are related to the current search, and may help narrow down the results.")
    listicle: Optional[List[SearchResult]] = Field(default=None, description="Contains all search results that are lists of things. Results with titles like \"5 things you didn't know about...\", or \"10 of the best headphones\".")
    web_archive: Optional[List[SearchResult]] = Field(default=None, description="Contains all search results for archived websites that may not be available anymore")
    __properties: ClassVar[List[str]] = ["search", "image", "video", "podcast", "podcast_creator", "news", "adjacent_question", "direct_answer", "interesting_news", "interesting_finds", "infobox", "code", "package_tracking", "public_records", "weather", "related_search", "listicle", "web_archive"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Search200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in search (list)
        _items = []
        if self.search:
            for _item_search in self.search:
                if _item_search:
                    _items.append(_item_search.to_dict())
            _dict['search'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in image (list)
        _items = []
        if self.image:
            for _item_image in self.image:
                if _item_image:
                    _items.append(_item_image.to_dict())
            _dict['image'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in video (list)
        _items = []
        if self.video:
            for _item_video in self.video:
                if _item_video:
                    _items.append(_item_video.to_dict())
            _dict['video'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in podcast (list)
        _items = []
        if self.podcast:
            for _item_podcast in self.podcast:
                if _item_podcast:
                    _items.append(_item_podcast.to_dict())
            _dict['podcast'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in podcast_creator (list)
        _items = []
        if self.podcast_creator:
            for _item_podcast_creator in self.podcast_creator:
                if _item_podcast_creator:
                    _items.append(_item_podcast_creator.to_dict())
            _dict['podcast_creator'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in news (list)
        _items = []
        if self.news:
            for _item_news in self.news:
                if _item_news:
                    _items.append(_item_news.to_dict())
            _dict['news'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in adjacent_question (list)
        _items = []
        if self.adjacent_question:
            for _item_adjacent_question in self.adjacent_question:
                if _item_adjacent_question:
                    _items.append(_item_adjacent_question.to_dict())
            _dict['adjacent_question'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in direct_answer (list)
        _items = []
        if self.direct_answer:
            for _item_direct_answer in self.direct_answer:
                if _item_direct_answer:
                    _items.append(_item_direct_answer.to_dict())
            _dict['direct_answer'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in interesting_news (list)
        _items = []
        if self.interesting_news:
            for _item_interesting_news in self.interesting_news:
                if _item_interesting_news:
                    _items.append(_item_interesting_news.to_dict())
            _dict['interesting_news'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in interesting_finds (list)
        _items = []
        if self.interesting_finds:
            for _item_interesting_finds in self.interesting_finds:
                if _item_interesting_finds:
                    _items.append(_item_interesting_finds.to_dict())
            _dict['interesting_finds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in infobox (list)
        _items = []
        if self.infobox:
            for _item_infobox in self.infobox:
                if _item_infobox:
                    _items.append(_item_infobox.to_dict())
            _dict['infobox'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in code (list)
        _items = []
        if self.code:
            for _item_code in self.code:
                if _item_code:
                    _items.append(_item_code.to_dict())
            _dict['code'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in package_tracking (list)
        _items = []
        if self.package_tracking:
            for _item_package_tracking in self.package_tracking:
                if _item_package_tracking:
                    _items.append(_item_package_tracking.to_dict())
            _dict['package_tracking'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in public_records (list)
        _items = []
        if self.public_records:
            for _item_public_records in self.public_records:
                if _item_public_records:
                    _items.append(_item_public_records.to_dict())
            _dict['public_records'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in weather (list)
        _items = []
        if self.weather:
            for _item_weather in self.weather:
                if _item_weather:
                    _items.append(_item_weather.to_dict())
            _dict['weather'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in related_search (list)
        _items = []
        if self.related_search:
            for _item_related_search in self.related_search:
                if _item_related_search:
                    _items.append(_item_related_search.to_dict())
            _dict['related_search'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in listicle (list)
        _items = []
        if self.listicle:
            for _item_listicle in self.listicle:
                if _item_listicle:
                    _items.append(_item_listicle.to_dict())
            _dict['listicle'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in web_archive (list)
        _items = []
        if self.web_archive:
            for _item_web_archive in self.web_archive:
                if _item_web_archive:
                    _items.append(_item_web_archive.to_dict())
            _dict['web_archive'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Search200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "search": [SearchResult.from_dict(_item) for _item in obj["search"]] if obj.get("search") is not None else None,
            "image": [SearchResult.from_dict(_item) for _item in obj["image"]] if obj.get("image") is not None else None,
            "video": [SearchResult.from_dict(_item) for _item in obj["video"]] if obj.get("video") is not None else None,
            "podcast": [SearchResult.from_dict(_item) for _item in obj["podcast"]] if obj.get("podcast") is not None else None,
            "podcast_creator": [SearchResult.from_dict(_item) for _item in obj["podcast_creator"]] if obj.get("podcast_creator") is not None else None,
            "news": [SearchResult.from_dict(_item) for _item in obj["news"]] if obj.get("news") is not None else None,
            "adjacent_question": [SearchResult.from_dict(_item) for _item in obj["adjacent_question"]] if obj.get("adjacent_question") is not None else None,
            "direct_answer": [SearchResult.from_dict(_item) for _item in obj["direct_answer"]] if obj.get("direct_answer") is not None else None,
            "interesting_news": [SearchResult.from_dict(_item) for _item in obj["interesting_news"]] if obj.get("interesting_news") is not None else None,
            "interesting_finds": [SearchResult.from_dict(_item) for _item in obj["interesting_finds"]] if obj.get("interesting_finds") is not None else None,
            "infobox": [SearchResult.from_dict(_item) for _item in obj["infobox"]] if obj.get("infobox") is not None else None,
            "code": [SearchResult.from_dict(_item) for _item in obj["code"]] if obj.get("code") is not None else None,
            "package_tracking": [SearchResult.from_dict(_item) for _item in obj["package_tracking"]] if obj.get("package_tracking") is not None else None,
            "public_records": [SearchResult.from_dict(_item) for _item in obj["public_records"]] if obj.get("public_records") is not None else None,
            "weather": [SearchResult.from_dict(_item) for _item in obj["weather"]] if obj.get("weather") is not None else None,
            "related_search": [SearchResult.from_dict(_item) for _item in obj["related_search"]] if obj.get("related_search") is not None else None,
            "listicle": [SearchResult.from_dict(_item) for _item in obj["listicle"]] if obj.get("listicle") is not None else None,
            "web_archive": [SearchResult.from_dict(_item) for _item in obj["web_archive"]] if obj.get("web_archive") is not None else None
        })
        return _obj


