# coding: utf-8

"""
    Kagi API

    The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

    The version of the OpenAPI document: 0.0.0
    Contact: support@kagi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.translate_dictionary200_response_definition_primary_meaning import TranslateDictionary200ResponseDefinitionPrimaryMeaning
from openapi_client.models.translate_dictionary200_response_definition_secondary_meanings_inner import TranslateDictionary200ResponseDefinitionSecondaryMeaningsInner
from typing import Optional, Set
from typing_extensions import Self

class TranslateDictionary200ResponseDefinition(BaseModel):
    """
    Structured definition of the word
    """ # noqa: E501
    word: Optional[StrictStr] = Field(default=None, description="The word being defined")
    part_of_speech: Optional[List[StrictStr]] = Field(default=None, description="All parts of speech that apply to the word across all meanings")
    usage_level: Optional[List[StrictStr]] = Field(default=None, description="Register or context where the word is typically used (formal, informal, slang, technical, etc.)")
    primary_meaning: Optional[TranslateDictionary200ResponseDefinitionPrimaryMeaning] = None
    secondary_meanings: Optional[List[TranslateDictionary200ResponseDefinitionSecondaryMeaningsInner]] = Field(default=None, description="Secondary or less common meanings")
    examples: Optional[List[StrictStr]] = Field(default=None, description="Example sentences showing usage")
    pronunciation: Optional[StrictStr] = Field(default=None, description="Phonetic pronunciation (if available)")
    etymology: Optional[StrictStr] = Field(default=None, description="Information about word origin (if available)")
    __properties: ClassVar[List[str]] = ["word", "part_of_speech", "usage_level", "primary_meaning", "secondary_meanings", "examples", "pronunciation", "etymology"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranslateDictionary200ResponseDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of primary_meaning
        if self.primary_meaning:
            _dict['primary_meaning'] = self.primary_meaning.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in secondary_meanings (list)
        _items = []
        if self.secondary_meanings:
            for _item_secondary_meanings in self.secondary_meanings:
                if _item_secondary_meanings:
                    _items.append(_item_secondary_meanings.to_dict())
            _dict['secondary_meanings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranslateDictionary200ResponseDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "word": obj.get("word"),
            "part_of_speech": obj.get("part_of_speech"),
            "usage_level": obj.get("usage_level"),
            "primary_meaning": TranslateDictionary200ResponseDefinitionPrimaryMeaning.from_dict(obj["primary_meaning"]) if obj.get("primary_meaning") is not None else None,
            "secondary_meanings": [TranslateDictionary200ResponseDefinitionSecondaryMeaningsInner.from_dict(_item) for _item in obj["secondary_meanings"]] if obj.get("secondary_meanings") is not None else None,
            "examples": obj.get("examples"),
            "pronunciation": obj.get("pronunciation"),
            "etymology": obj.get("etymology")
        })
        return _obj


