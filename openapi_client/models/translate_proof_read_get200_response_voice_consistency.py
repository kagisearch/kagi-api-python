# coding: utf-8

"""
    Kagi API

    The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

    The version of the OpenAPI document: 0.0.0
    Contact: support@kagi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.translate_proof_read_get200_response_voice_consistency_passive_instances_inner import TranslateProofReadGet200ResponseVoiceConsistencyPassiveInstancesInner
from typing import Optional, Set
from typing_extensions import Self

class TranslateProofReadGet200ResponseVoiceConsistency(BaseModel):
    """
    Analysis of active vs. passive voice usage
    """ # noqa: E501
    active_voice_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Approximate percentage of sentences using active voice")
    passive_voice_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Approximate percentage of sentences using passive voice")
    is_consistent: Optional[StrictBool] = Field(default=None, description="Whether the voice usage is consistent throughout")
    suggestion: Optional[StrictStr] = Field(default=None, description="Optional suggestion about voice usage")
    passive_instances: Optional[List[TranslateProofReadGet200ResponseVoiceConsistencyPassiveInstancesInner]] = None
    summary: Optional[StrictStr] = Field(default=None, description="Overall assessment of voice usage and its effectiveness")
    __properties: ClassVar[List[str]] = ["active_voice_percentage", "passive_voice_percentage", "is_consistent", "suggestion", "passive_instances", "summary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranslateProofReadGet200ResponseVoiceConsistency from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in passive_instances (list)
        _items = []
        if self.passive_instances:
            for _item_passive_instances in self.passive_instances:
                if _item_passive_instances:
                    _items.append(_item_passive_instances.to_dict())
            _dict['passive_instances'] = _items
        # set to None if suggestion (nullable) is None
        # and model_fields_set contains the field
        if self.suggestion is None and "suggestion" in self.model_fields_set:
            _dict['suggestion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranslateProofReadGet200ResponseVoiceConsistency from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active_voice_percentage": obj.get("active_voice_percentage"),
            "passive_voice_percentage": obj.get("passive_voice_percentage"),
            "is_consistent": obj.get("is_consistent"),
            "suggestion": obj.get("suggestion"),
            "passive_instances": [TranslateProofReadGet200ResponseVoiceConsistencyPassiveInstancesInner.from_dict(_item) for _item in obj["passive_instances"]] if obj.get("passive_instances") is not None else None,
            "summary": obj.get("summary")
        })
        return _obj


