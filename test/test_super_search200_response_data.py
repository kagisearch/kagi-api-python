# coding: utf-8

"""
    Kagi API

    The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 

    The version of the OpenAPI document: 0.1.0
    Contact: support@kagi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.super_search200_response_data import SuperSearch200ResponseData

class TestSuperSearch200ResponseData(unittest.TestCase):
    """SuperSearch200ResponseData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SuperSearch200ResponseData:
        """Test SuperSearch200ResponseData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SuperSearch200ResponseData`
        """
        model = SuperSearch200ResponseData()
        if include_optional:
            return SuperSearch200ResponseData(
                search = [
                    openapi_client.models.result_search.resultSearch(
                        url = '', 
                        title = '', 
                        snippet = '', 
                        time = '', 
                        image = openapi_client.models.result_search_image.resultSearch_image(
                            url = '', 
                            height = 56, 
                            width = 56, ), 
                        props = openapi_client.models.result_search_props.resultSearch_props(
                            thumbnail_image = openapi_client.models.result_search_props_thumbnail_image.resultSearch_props_thumbnail_image(
                                url = '', 
                                height = 56, 
                                width = 56, ), 
                            language = '', 
                            language_probability = 1.337, 
                            paywalled = True, 
                            sort_normalize_url = '', 
                            sort_group_id = '', 
                            source_history = [
                                ''
                                ], ), )
                    ],
                video = [
                    openapi_client.models.result_video.resultVideo(
                        url = '', 
                        title = '', 
                        snippet = '', 
                        time = '', 
                        image = openapi_client.models.result_search_image.resultSearch_image(
                            url = '', 
                            height = 56, 
                            width = 56, ), 
                        props = openapi_client.models.result_video_props.resultVideo_props(
                            hires_thumbnail_url = '', 
                            sort_normalize_url = '', 
                            sort_group_id = '', 
                            language = '', 
                            language_probability = 1.337, 
                            source_history = [
                                ''
                                ], ), )
                    ],
                adjacent_question = [
                    openapi_client.models.result_adjacent_question.resultAdjacentQuestion(
                        url = '', 
                        title = '', 
                        snippet = '', 
                        time = '', 
                        image = openapi_client.models.result_search_image.resultSearch_image(
                            url = '', 
                            height = 56, 
                            width = 56, ), 
                        props = openapi_client.models.result_adjacent_question_props.resultAdjacentQuestion_props(
                            question = '', 
                            language = '', 
                            language_probability = 1.337, ), )
                    ],
                infobox = [
                    openapi_client.models.result_infobox.resultInfobox(
                        url = '', 
                        title = '', 
                        snippet = '', 
                        time = '', 
                        image = openapi_client.models.result_search_image.resultSearch_image(
                            url = '', 
                            height = 56, 
                            width = 56, ), 
                        props = openapi_client.models.result_infobox_props.resultInfobox_props(
                            infobox = [
                                openapi_client.models.result_infobox_props_infobox_inner.resultInfobox_props_infobox_inner(
                                    header = '', 
                                    value = '', 
                                    merged = True, )
                                ], 
                            wikipedia/subtext = '', 
                            wikipedia/page_id = 56, 
                            language = '', 
                            language_probability = 1.337, 
                            sort_normalize_url = '', 
                            sort_group_id = '', 
                            source_history = [
                                ''
                                ], ), )
                    ],
                web_archive = [
                    openapi_client.models.result_web_archive.resultWebArchive(
                        url = '', 
                        title = '', 
                        snippet = '', 
                        time = '', 
                        image = openapi_client.models.result_search_image.resultSearch_image(
                            url = '', 
                            height = 56, 
                            width = 56, ), 
                        props = openapi_client.models.result_web_archive_props.resultWebArchive_props(
                            web_archive_domain = '', 
                            language = '', 
                            language_probability = 1.337, ), )
                    ]
            )
        else:
            return SuperSearch200ResponseData(
        )
        """

    def testSuperSearch200ResponseData(self):
        """Test SuperSearch200ResponseData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
