# coding: utf-8

"""
    Kagi API

    The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 

    The version of the OpenAPI document: 0.1.0
    Contact: support@kagi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.fast_gpt200_response import FastGPT200Response

class TestFastGPT200Response(unittest.TestCase):
    """FastGPT200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FastGPT200Response:
        """Test FastGPT200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FastGPT200Response`
        """
        model = FastGPT200Response()
        if include_optional:
            return FastGPT200Response(
                meta = openapi_client.models.meta.meta(
                    trace = '', 
                    id = '', 
                    node = '', 
                    ms = 56, 
                    query = openapi_client.models.meta_query.meta_query(
                        raw = '', 
                        terms = '', 
                        fields = [
                            openapi_client.models.meta_query_fields_inner.meta_query_fields_inner(
                                kind = '', 
                                value = '', 
                                name = '', 
                                negate = True, )
                            ], 
                        workflow = '', ), ),
                data = openapi_client.models.fast_gpt_200_response_data.fastGPT_200_response_data(
                    output = '', 
                    tokens = 56, 
                    references = [
                        openapi_client.models.search_object.searchObject(
                            t = 56, 
                            rank = 56, 
                            url = '', 
                            title = '', 
                            snippet = '', 
                            published = '', 
                            thumbnail = openapi_client.models.result_search_image.resultSearch_image(
                                url = '', 
                                height = 56, 
                                width = 56, ), 
                            image = openapi_client.models.result_search_image.resultSearch_image(
                                url = '', 
                                height = 56, 
                                width = 56, ), )
                        ], )
            )
        else:
            return FastGPT200Response(
        )
        """

    def testFastGPT200Response(self):
        """Test FastGPT200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
